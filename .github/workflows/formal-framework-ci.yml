name: Formal Framework CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'docs/**'
      - 'samples/**'
      - '.github/workflows/**'
      - 'requirements.txt'
      - 'pyproject.toml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'docs/**'
      - 'samples/**'
      - '.github/workflows/**'
      - 'requirements.txt'
      - 'pyproject.toml'

env:
  PYTHON_VERSION: '3.9'
  NODE_VERSION: '18'

jobs:
  # Job 1: Code Quality and Linting
  code-quality:
    name: Code Quality and Linting
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 black isort mypy pylint
          
      - name: Run Python linting
        run: |
          echo "Running flake8..."
          flake8 samples/validation-scripts/ --max-line-length=120 --extend-ignore=E203,W503
          
          echo "Running black check..."
          black --check --diff samples/validation-scripts/
          
          echo "Running isort check..."
          isort --check-only --diff samples/validation-scripts/
          
      - name: Run Python type checking
        run: |
          echo "Running mypy..."
          mypy samples/validation-scripts/ --ignore-missing-imports
          
      - name: Run Python code analysis
        run: |
          echo "Running pylint..."
          pylint samples/validation-scripts/ --disable=C0114,C0116,R0903,W0621

  # Job 2: Unit Testing
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.8', '3.9', '3.10', '3.11']
        
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-cov pytest-xdist
          pip install z3-solver
          
      - name: Run unit tests
        run: |
          pytest samples/validation-scripts/pytest/ \
            --cov=samples/validation-scripts \
            --cov-report=xml \
            --cov-report=html \
            --cov-report=term-missing \
            --durations=10 \
            -v
            
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella

  # Job 3: Integration Testing
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: unit-tests
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-cov
          pip install z3-solver
          
      - name: Run integration tests
        run: |
          pytest samples/validation-scripts/pytest/ -m integration \
            --cov=samples/validation-scripts \
            --cov-report=xml \
            --cov-report=term-missing \
            --durations=20 \
            -v

  # Job 4: Performance Testing
  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: unit-tests
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-benchmark
          pip install z3-solver
          
      - name: Run performance tests
        run: |
          pytest samples/validation-scripts/pytest/ -m slow \
            --benchmark-only \
            --benchmark-skip \
            --durations=30 \
            -v

  # Job 5: Load Testing
  load-tests:
    name: Load Tests
    runs-on: ubuntu-latest
    needs: unit-tests
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      - name: Install k6
        run: |
          curl -L https://github.com/grafana/k6/releases/download/v0.45.0/k6-v0.45.0-linux-amd64.tar.gz | tar xz
          sudo cp k6-v0.45.0-linux-amd64/k6 /usr/local/bin
          
      - name: Run k6 load tests
        run: |
          echo "Running k6 load tests..."
          k6 run samples/validation-scripts/k6/load-test.js \
            --out json=load-test-results.json \
            --out influxdb=http://localhost:8086/k6

  # Job 6: Formal Verification
  formal-verification:
    name: Formal Verification
    runs-on: ubuntu-latest
    needs: unit-tests
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Install TLA+ tools
        run: |
          sudo apt-get update
          sudo apt-get install -y openjdk-11-jdk
          wget https://github.com/tlaplus/tlaplus/releases/download/v1.8.0/tla2tools.jar
          echo '#!/bin/bash' > tlc
          echo 'java -cp tla2tools.jar tlc2.TLC "$@"' >> tlc
          chmod +x tlc
          sudo mv tlc /usr/local/bin/
          
      - name: Run TLA+ model checking
        run: |
          echo "Running TLA+ model checking for Interaction Model..."
          tlc -workers 4 samples/validation-scripts/tla/interaction-model.tla
          
          echo "Running TLA+ model checking for Data Model..."
          tlc -workers 4 samples/validation-scripts/tla/data-model.tla
          
          echo "Running TLA+ model checking for Runtime Model..."
          tlc -workers 4 samples/validation-scripts/tla/runtime-model.tla

  # Job 7: Constraint Solving
  constraint-solving:
    name: Constraint Solving
    runs-on: ubuntu-latest
    needs: unit-tests
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Install Z3 solver
        run: |
          python -m pip install --upgrade pip
          pip install z3-solver
          
      - name: Run Z3 constraint solving
        run: |
          echo "Running Z3 constraint solver..."
          python samples/validation-scripts/z3/constraint-solver.py --model data
          python samples/validation-scripts/z3/constraint-solver.py --model interaction
          python samples/validation-scripts/z3/constraint-solver.py --model both

  # Job 8: Documentation Validation
  documentation-validation:
    name: Documentation Validation
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Install documentation tools
        run: |
          python -m pip install --upgrade pip
          pip install markdown-link-check
          pip install yamllint
          
      - name: Validate markdown links
        run: |
          echo "Checking markdown links..."
          find docs/ -name "*.md" -exec markdown-link-check {} \;
          
      - name: Validate YAML files
        run: |
          echo "Checking YAML files..."
          yamllint samples/validation-scripts/k6/ samples/validation-scripts/tla/
          
      - name: Check file structure
        run: |
          echo "Validating file structure..."
          python -c "
          import os
          required_files = [
              'docs/README.md',
              'docs/PROJECT_REPOSITIONING_PLAN.md',
              'docs/formal-model/COMPLETION_STATUS.md',
              'docs/L2_D01_交互元模型.md',
              'docs/L2_D02_数据元模型.md',
              'docs/L2_D03_功能元模型.md',
              'docs/L2_D04_运行时元模型.md',
              'docs/L2_D05_部署元模型.md',
              'docs/L2_D06_监控元模型.md',
              'docs/L2_D07_控制调度元模型.md',
              'docs/L2_D08_测试元模型.md'
          ]
          for file_path in required_files:
              if not os.path.exists(file_path):
                  print(f'Missing required file: {file_path}')
                  exit(1)
          print('All required files present')
          "

  # Job 9: Security Scanning
  security-scanning:
    name: Security Scanning
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Install security tools
        run: |
          python -m pip install --upgrade pip
          pip install bandit safety
          
      - name: Run security analysis
        run: |
          echo "Running bandit security analysis..."
          bandit -r samples/validation-scripts/ -f json -o bandit-report.json
          
          echo "Running safety check..."
          safety check --json --output safety-report.json
          
      - name: Upload security reports
        uses: actions/upload-artifact@v3
        with:
          name: security-reports
          path: |
            bandit-report.json
            safety-report.json

  # Job 10: Build and Package
  build-package:
    name: Build and Package
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests, formal-verification, constraint-solving]
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Install build tools
        run: |
          python -m pip install --upgrade pip
          pip install build twine
          
      - name: Build package
        run: |
          python -m build
          
      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-package
          path: dist/

  # Job 11: Deploy Documentation
  deploy-docs:
    name: Deploy Documentation
    runs-on: ubuntu-latest
    needs: [documentation-validation, build-package]
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Install documentation tools
        run: |
          python -m pip install --upgrade pip
          pip install mkdocs mkdocs-material
          
      - name: Build documentation
        run: |
          mkdocs build --site-dir ./docs/_build
          
      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./docs/_build

  # Job 12: Quality Gates
  quality-gates:
    name: Quality Gates
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests, formal-verification, constraint-solving, security-scanning]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Download coverage reports
        uses: actions/download-artifact@v3
        with:
          name: coverage-reports
          path: coverage/
          
      - name: Check quality gates
        run: |
          echo "Checking quality gates..."
          
          # Coverage threshold
          COVERAGE=$(grep -o 'TOTAL.*[0-9]*%' coverage/coverage.xml | grep -o '[0-9]*%' | head -1 | sed 's/%//')
          if [ "$COVERAGE" -lt 80 ]; then
              echo "Coverage below threshold: $COVERAGE% < 80%"
              exit 1
          fi
          echo "Coverage threshold met: $COVERAGE% >= 80%"
          
          # Test results
          if [ -f "test-results.xml" ]; then
              FAILURES=$(grep -c 'failures="[1-9]' test-results.xml || echo "0")
              if [ "$FAILURES" -gt 0 ]; then
                  echo "Test failures detected: $FAILURES"
                  exit 1
              fi
          fi
          
          # Security issues
          if [ -f "security-reports/bandit-report.json" ]; then
              HIGH_ISSUES=$(jq '.results[] | select(.issue_severity == "HIGH") | .issue_text' security-reports/bandit-report.json | wc -l)
              if [ "$HIGH_ISSUES" -gt 0 ]; then
                  echo "High security issues detected: $HIGH_ISSUES"
                  exit 1
              fi
          fi
          
          echo "All quality gates passed!"

# Note: Dependencies are cached automatically by GitHub Actions
# Python packages are cached in ~/.cache/pip
# Node.js packages are cached in ~/.npm
