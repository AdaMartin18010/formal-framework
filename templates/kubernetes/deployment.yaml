apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{project_name}}
  namespace: {{namespace}}
  labels:
    app: {{project_name}}
    version: {{version}}
    environment: {{environment}}
spec:
  replicas: {{replicas}}
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: {{project_name}}
  template:
    metadata:
      labels:
        app: {{project_name}}
        version: {{version}}
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8080"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: {{project_name}}-sa
      containers:
      - name: {{project_name}}
        image: {{image_repository}}:{{image_tag}}
        imagePullPolicy: {{image_pull_policy}}
        ports:
        - containerPort: 8080
          name: http
          protocol: TCP
        - containerPort: 9090
          name: metrics
          protocol: TCP
        env:
        - name: RUST_LOG
          value: "{{log_level}}"
        - name: RUST_BACKTRACE
          value: "1"
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: {{project_name}}-secrets
              key: database-url
        - name: REDIS_URL
          valueFrom:
            secretKeyRef:
              name: {{project_name}}-secrets
              key: redis-url
        - name: JWT_SECRET
          valueFrom:
            secretKeyRef:
              name: {{project_name}}-secrets
              key: jwt-secret
        - name: ENVIRONMENT
          value: "{{environment}}"
        - name: SERVICE_NAME
          value: "{{project_name}}"
        - name: SERVICE_VERSION
          value: "{{version}}"
        resources:
          requests:
            memory: "{{memory_request}}"
            cpu: "{{cpu_request}}"
          limits:
            memory: "{{memory_limit}}"
            cpu: "{{cpu_limit}}"
        livenessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
          successThreshold: 1
        readinessProbe:
          httpGet:
            path: /ready
            port: 8080
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
          successThreshold: 1
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 1001
          runAsGroup: 1001
          capabilities:
            drop:
            - ALL
        volumeMounts:
        - name: config
          mountPath: /app/configs
          readOnly: true
        - name: logs
          mountPath: /app/logs
      volumes:
      - name: config
        configMap:
          name: {{project_name}}-config
      - name: logs
        emptyDir: {}
      imagePullSecrets:
      - name: {{image_pull_secret}}
---
apiVersion: v1
kind: Service
metadata:
  name: {{project_name}}
  namespace: {{namespace}}
  labels:
    app: {{project_name}}
spec:
  type: ClusterIP
  ports:
  - port: 80
    targetPort: 8080
    protocol: TCP
    name: http
  - port: 9090
    targetPort: 9090
    protocol: TCP
    name: metrics
  selector:
    app: {{project_name}}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{project_name}}-config
  namespace: {{namespace}}
data:
  config.yaml: |
    environment: {{environment}}
    server:
      host: "0.0.0.0"
      port: 8080
      workers: 4
      timeout: 30
    
    database:
      postgresql:
        host: "{{database_host}}"
        port: 5432
        database: "{{database_name}}"
        username: "{{database_user}}"
        max_connections: 10
        min_connections: 2
      
      redis:
        host: "{{redis_host}}"
        port: 6379
        database: 0
        max_connections: 20
    
    logging:
      level: "{{log_level}}"
      format: "json"
      output: "stdout"
    
    monitoring:
      metrics:
        enabled: true
        port: 9090
        path: "/metrics"
      
      health_check:
        enabled: true
        port: 8080
        path: "/health"
---
apiVersion: v1
kind: Secret
metadata:
  name: {{project_name}}-secrets
  namespace: {{namespace}}
type: Opaque
data:
  database-url: {{database_url_base64}}
  redis-url: {{redis_url_base64}}
  jwt-secret: {{jwt_secret_base64}}
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: {{project_name}}-sa
  namespace: {{namespace}}
  labels:
    app: {{project_name}}
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: {{project_name}}-role
  namespace: {{namespace}}
rules:
- apiGroups: [""]
  resources: ["pods", "services", "endpoints"]
  verbs: ["get", "list", "watch"]
- apiGroups: [""]
  resources: ["configmaps", "secrets"]
  verbs: ["get", "list", "watch"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: {{project_name}}-role-binding
  namespace: {{namespace}}
subjects:
- kind: ServiceAccount
  name: {{project_name}}-sa
  namespace: {{namespace}}
roleRef:
  kind: Role
  name: {{project_name}}-role
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: {{project_name}}-ingress
  namespace: {{namespace}}
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
spec:
  ingressClassName: nginx
  tls:
  - hosts:
    - {{ingress_host}}
    secretName: {{project_name}}-tls
  rules:
  - host: {{ingress_host}}
    http:
      paths:
      - path: /api/v1/{{project_name}}
        pathType: Prefix
        backend:
          service:
            name: {{project_name}}
            port:
              number: 80
---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: {{project_name}}-hpa
  namespace: {{namespace}}
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: {{project_name}}
  minReplicas: {{min_replicas}}
  maxReplicas: {{max_replicas}}
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 10
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60 